{"description": "Render Settings tutorial: scene1 with write animations", "code": "from manim import *\n\nclass Scene1(Scene):\n    def construct(self):\n        t = Text(\"SCENE 1\")\n        self.play(Write(t))\n        self.wait()", "source": "beethoven", "metadata": {"tutorial_file": "_01_render_settings.py", "tutorial_number": 1, "scene_name": "Scene1", "scene_index": 0, "topic": "render_settings"}}
{"description": "Render Settings tutorial: scene2 with fade in animations", "code": "from manim import *\n\nclass Scene2(Scene):\n    def construct(self):\n        t = Text(\"SCENE 2\")\n        self.play(FadeIn(t))\n        self.wait()", "source": "beethoven", "metadata": {"tutorial_file": "_01_render_settings.py", "tutorial_number": 1, "scene_name": "Scene2", "scene_index": 1, "topic": "render_settings"}}
{"description": "Render Settings tutorial: scene3 with animate animations", "code": "from manim import *\n\nclass Scene3(Scene):\n    def construct(self):\n        t = Text(\"SCENE 3\")\n        self.play(GrowFromCenter(t))\n        self.wait()", "source": "beethoven", "metadata": {"tutorial_file": "_01_render_settings.py", "tutorial_number": 1, "scene_name": "Scene3", "scene_index": 2, "topic": "render_settings"}}
{"description": "Basic Animations tutorial: no animations with animate animations", "code": "from manim import *\n\nclass NoAnimations(Scene):\n    \"\"\"\n    In this scene there are no animations,\n    neither self.wait(...) nor self.play(...)\n    so it should not be rendered as video,\n    but can be rendered as image using -s or -ps\n    \"\"\"\n    def construct(self):\n        text = Text(\"Hello world\")\n        self.add(text)", "source": "beethoven", "metadata": {"tutorial_file": "_02_basic_animations.py", "tutorial_number": 2, "scene_name": "NoAnimations", "scene_index": 0, "topic": "basic_animations"}}
{"description": "Basic Animations tutorial: basic animations with fade in, write animations", "code": "from manim import *\n\nclass BasicAnimations(Scene):\n    def construct(self):\n        text = Text(\"Hello word\")\n        self.play(\n            Write(text)\n            # FadeIn(text)\n            # GrowFromCenter(text)\n            # FadeInFromLarge(text, scale_factor=2)\n        )", "source": "beethoven", "metadata": {"tutorial_file": "_02_basic_animations.py", "tutorial_number": 2, "scene_name": "BasicAnimations", "scene_index": 1, "topic": "basic_animations"}}
{"description": "Basic Animations tutorial: basic progression with fade out, write animations", "code": "from manim import *\n\nclass BasicProgression(Scene):\n    def construct(self):\n        text = Text(\"Hello word\")\n        self.play(Write(text))\n        self.wait() # 1 second by default\n        self.play(FadeToColor(text,RED))\n        self.wait()\n        self.play(FadeOut(text))\n        self.wait()", "source": "beethoven", "metadata": {"tutorial_file": "_02_basic_animations.py", "tutorial_number": 2, "scene_name": "BasicProgression", "scene_index": 2, "topic": "basic_animations"}}
{"description": "Basic Animations tutorial: change duration with create animations", "code": "from manim import *\n\nclass ChangeDuration(Scene):\n    def construct(self):\n        self.play(\n            Create(Circle()),\n            run_time=3,\n            rate_func=smooth\n        )\n        self.wait()", "source": "beethoven", "metadata": {"tutorial_file": "_02_basic_animations.py", "tutorial_number": 2, "scene_name": "ChangeDuration", "scene_index": 3, "topic": "basic_animations"}}
{"description": "Basic Animations tutorial: change duration multiple animations with fade in, create animations", "code": "from manim import *\n\nclass ChangeDurationMultipleAnimations(Scene):\n    def construct(self):\n        self.play(\n            Create(\n                Circle(),\n                run_time=3,\n                rate_func=smooth\n            ),\n            FadeIn(\n                Square(),\n                run_time=2,\n                rate_func=there_and_back\n            ),\n            GrowFromCenter(\n                Triangle()\n            )\n        )\n        self.wait()", "source": "beethoven", "metadata": {"tutorial_file": "_02_basic_animations.py", "tutorial_number": 2, "scene_name": "ChangeDurationMultipleAnimations", "scene_index": 4, "topic": "basic_animations"}}
{"description": "Basic Animations tutorial: more animations with write, rotate animations", "code": "from manim import *\n\nclass MoreAnimations(Scene):\n    def construct(self):\n        text = Text(\"Hello world\")\n        self.play(Write(text))\n        self.wait()\n        self.play(Rotate(text,PI/2))\n        self.wait()\n        self.play(Indicate(text))\n        self.wait()\n        self.play(FocusOn(text))\n        self.wait()\n        self.play(ShowCreationThenDestructionAround(text))\n        self.wait()", "source": "beethoven", "metadata": {"tutorial_file": "_02_basic_animations.py", "tutorial_number": 2, "scene_name": "MoreAnimations", "scene_index": 5, "topic": "basic_animations"}}
{"description": "Basic Positions tutorial: coord screen with fade in animations", "code": "from manim import *\n\nclass CoordScreen(Scene):\n    def construct(self):\n        screen_grid = ScreenGrid()\n        dot = Dot([1, 1, 0])\n        self.add(screen_grid)\n        self.play(FadeIn(dot))\n        self.wait()", "source": "beethoven", "metadata": {"tutorial_file": "_03_basic_positions.py", "tutorial_number": 3, "scene_name": "CoordScreen", "scene_index": 0, "topic": "basic_positions"}}
{"description": "Basic Positions tutorial: basic positions", "code": "from manim import *\n\nclass BasicPositions(Scene):\n    def construct(self):\n        dot_center = Dot(color=WHITE)      # ORIGIN: [0,0,0] by default\n        dot_left  = Dot(LEFT,color=RED)    # [-1,0,0]\n        dot_right = Dot(RIGHT,color=BLUE)  # [1,0,0]\n        dot_up    = Dot(UP,color=GREEN)    # [0,1,0]\n        dot_down  = Dot(DOWN,color=ORANGE) # [0,-1,0]\n        dot_2_3   = Dot([2,3,0],color=TEAL)# [2,3,0]\n\n        logger.info(f\"frame_width: {config.frame_width}\")\n        logger.info(f\"frame_height: {config.frame_height}\")\n\n        self.add(\n            # ScreenGrid(),\n            dot_center,\n            dot_left,\n            dot_right,\n            dot_up,\n            dot_down,\n            dot_2_3,\n        )\n        self.wait()", "source": "beethoven", "metadata": {"tutorial_file": "_03_basic_positions.py", "tutorial_number": 3, "scene_name": "BasicPositions", "scene_index": 1, "topic": "basic_positions"}}
{"description": "Basic Positions tutorial: edges and corners", "code": "from manim import *\n\nclass EdgesAndCorners(Scene):\n    def construct(self):\n        square = Square()\n        square.to_edge(UR)               # UP + RIGHT\n\n        triangle = Triangle()\n        triangle.to_edge(DL,buff=0.1)   # DOWN + LEFT\n\n        dot_up   = Dot(color=RED)\n        dot_up.to_edge(UP)\n\n        dot_down = Dot(color=BLUE)\n        dot_down.to_edge(DOWN,buff=2)\n\n        self.add(\n            square,\n            triangle,\n            dot_up,\n            dot_down\n        )\n        self.wait()", "source": "beethoven", "metadata": {"tutorial_file": "_03_basic_positions.py", "tutorial_number": 3, "scene_name": "EdgesAndCorners", "scene_index": 2, "topic": "basic_positions"}}
{"description": "Basic Positions tutorial: shift method", "code": "from manim import *\n\nclass ShiftMethod(Scene):\n    \"\"\"\n    The shift method moves the object \n    based on the current position of \n    the object.\n    \"\"\"\n    def construct(self):\n        circle = Circle()\n        self.add(circle)\n        self.wait()\n        circle.shift(RIGHT)\n        self.wait()\n        circle.shift(RIGHT)\n        self.wait()\n        circle.shift(DOWN)\n        self.wait()\n        circle.shift(LEFT)\n        self.wait()", "source": "beethoven", "metadata": {"tutorial_file": "_03_basic_positions.py", "tutorial_number": 3, "scene_name": "ShiftMethod", "scene_index": 3, "topic": "basic_positions"}}
{"description": "Basic Positions tutorial: move to method1", "code": "from manim import *\n\nclass MoveToMethod1(Scene):\n    \"\"\"\n    The move_to method moves the object\n    taking as reference the origin or\n    some particular point\n    \"\"\"\n    def construct(self):\n        circle = Circle()\n        self.add(circle)\n        self.wait()\n        circle.move_to(RIGHT)\n        self.wait()\n        circle.move_to(RIGHT)\n        self.wait()\n        circle.move_to(DOWN)\n        self.wait()\n        circle.move_to([2,3,0])\n        self.wait()", "source": "beethoven", "metadata": {"tutorial_file": "_03_basic_positions.py", "tutorial_number": 3, "scene_name": "MoveToMethod1", "scene_index": 4, "topic": "basic_positions"}}
{"description": "Basic Positions tutorial: move to method2", "code": "from manim import *\n\nclass MoveToMethod2(Scene):\n    def construct(self):\n        circle = Circle()\n        dot_1 = Dot([1,3,0],color=ORANGE)\n        dot_2 = Dot([-2,-3,0],color=BLUE)\n        self.add(circle,dot_1,dot_2)\n        self.wait()\n        circle.move_to(dot_1)\n        self.wait()\n        circle.move_to(dot_2)\n        self.wait()\n        circle.move_to(dot_2.get_center()+RIGHT)\n        self.wait()", "source": "beethoven", "metadata": {"tutorial_file": "_03_basic_positions.py", "tutorial_number": 3, "scene_name": "MoveToMethod2", "scene_index": 5, "topic": "basic_positions"}}
{"description": "Basic Positions tutorial: next to", "code": "from manim import *\n\nclass NextTo(Scene):\n    \"\"\"\n    next_to references the edges of an \n    object as a reference to locate \n    another object.\n    \"\"\"\n    def construct(self):\n        text = Text(\"Hello world\")\n        text.shift(LEFT+2*UP)\n\n        left_dot = Dot().next_to(text,LEFT)\n        right_dot = Dot().next_to(text,RIGHT,buff=0)\n        down_dot = Dot().next_to(text,DOWN,buff=1)\n\n        self.add(text, left_dot, right_dot,down_dot)\n        self.wait()", "source": "beethoven", "metadata": {"tutorial_file": "_03_basic_positions.py", "tutorial_number": 3, "scene_name": "NextTo", "scene_index": 6, "topic": "basic_positions"}}
{"description": "Basic Positions tutorial: borders and corners", "code": "from manim import *\n\nclass BordersAndCorners(Scene):\n    def construct(self):\n        text = Text(\"Hello world\").scale(2)\n        d1 = Dot(text.get_corner(UL))\n        d2 = Dot(text.get_bottom())\n        d3 = Dot(text.get_top())\n        d4 = Dot(text.get_left())\n        d5 = Dot(text.get_right())\n\n        self.add(text,d1,d2,d3,d4,d5)\n        self.wait()", "source": "beethoven", "metadata": {"tutorial_file": "_03_basic_positions.py", "tutorial_number": 3, "scene_name": "BordersAndCorners", "scene_index": 7, "topic": "basic_positions"}}
{"description": "Basic Positions tutorial: align", "code": "from manim import *\n\nclass Align(Scene):\n    def construct(self):\n        rect = Rectangle(width=6,height=4,color=RED)\n        a = Text(\"A\")\n        b = Text(\"B\")\n        c = Text(\"C\")\n\n        a.align_to(rect,LEFT)\n        b.align_to(rect,UP)\n        c.align_to(rect,UR)\n\n        self.add(rect,a,b,c)\n        self.wait()", "source": "beethoven", "metadata": {"tutorial_file": "_03_basic_positions.py", "tutorial_number": 3, "scene_name": "Align", "scene_index": 8, "topic": "basic_positions"}}
{"description": "Basic Positions tutorial: rotations", "code": "from manim import *\n\nclass Rotations(Scene):\n    def construct(self):\n        a = Text(\"A\")\n        a.shift(LEFT*3)\n        a.rotate(30*DEGREES) #or .rotate(PI/6)\n\n        dot = Dot(RIGHT)\n        b = Text(\"B\")\n        b.rotate(PI/2,about_point=dot.get_center())\n\n        self.add(a,b,dot)\n        self.wait()", "source": "beethoven", "metadata": {"tutorial_file": "_03_basic_positions.py", "tutorial_number": 3, "scene_name": "Rotations", "scene_index": 9, "topic": "basic_positions"}}
{"description": "Properties And Groups tutorial: v mobject properties", "code": "from manim import *\n\nclass VMobjectProperties(Scene):\n    def construct(self):\n        square = Square(\n            side_length=4,\n            # All VMobjects have\n            color=YELLOW,\n            stroke_width=5,\n            stroke_opacity=0.8,\n            stroke_color=PINK,\n            fill_color=TEAL,\n            fill_opacity=0.4\n        )\n        square.to_edge(LEFT)\n\n        circle = Circle(radius=3)\n        # All VMobjects have:\n        circle.set_fill(color=RED,opacity=0.5)\n        circle.set_stroke(color=YELLOW,opacity=0.8,width=9)\n        circle.to_edge(RIGHT)\n\n        self.add(\n            square,\n            circle\n        )", "source": "beethoven", "metadata": {"tutorial_file": "_04_properties_and_groups.py", "tutorial_number": 4, "scene_name": "VMobjectProperties", "scene_index": 0, "topic": "properties_and_groups"}}
{"description": "Properties And Groups tutorial: group mobjects", "code": "from manim import *\n\nclass GroupMobjects(Scene):\n    def construct(self):\n        group = Group(\n            Circle(),\n            Triangle(),\n            # Download image:\n            # curl https://raw.githubusercontent.com/ManimCommunity/manim/master/logo/cropped.png --output image.png\n            ImageMobject(\"image\")\n        )\n        group.arrange(\n            RIGHT, # Direction\n            aligned_edge=UP,\n            buff=0.3 # Separation\n        )\n        # old way: group.set_width(FRAME_WIDTH - 1)\n        group.width = config.frame_width - 1\n        self.add(group)\n        self.wait()", "source": "beethoven", "metadata": {"tutorial_file": "_04_properties_and_groups.py", "tutorial_number": 4, "scene_name": "GroupMobjects", "scene_index": 1, "topic": "properties_and_groups"}}
{"description": "Properties And Groups tutorial: v group mobjects", "code": "from manim import *\n\nclass VGroupMobjects(Scene):\n    def construct(self):\n        vgroup = VGroup(\n            Square(),\n            Triangle(),\n            Circle()\n        )\n        vgroup.arrange(\n            RIGHT,\n            aligned_edge=DOWN\n        )\n        # You cannot do this with simple Group\n        vgroup.set_style(\n            fill_color=ORANGE,\n            fill_opacity=0.8,\n            stroke_color=PINK,\n            stroke_opacity=0.8,\n            stroke_width=20\n        )\n        vgroup.width = config.frame_width - 1\n\n        self.add(vgroup)\n        self.wait()", "source": "beethoven", "metadata": {"tutorial_file": "_04_properties_and_groups.py", "tutorial_number": 4, "scene_name": "VGroupMobjects", "scene_index": 2, "topic": "properties_and_groups"}}
{"description": "Properties And Groups tutorial: v group mobjects list comprehension", "code": "from manim import *\n\nclass VGroupMobjectsListComprehension(Scene):\n    def construct(self):\n        vg = VGroup(\n            VGroup(*[Square() for _ in range(6)])\n                .arrange(RIGHT)\n                .set_color_by_gradient(RED,TEAL)\n                .set(width=config.frame_width-1),\n            VGroup(*[RegularPolygon(n) for n in range(3,9)])\n                .arrange(RIGHT)\n                .set_color_by_gradient(YELLOW,ORANGE)\n                .set(width=config.frame_width-1),\n            VGroup(*[\n                    VMClass().set(height=0.7) \n                    for VMClass in [Circle,Annulus,Ellipse,Triangle]\n                ])\n                .arrange(RIGHT)\n                .set_color_by_gradient(BLUE,GREEN)\n                .set(width=config.frame_width-1),\n        )\n        # width and height can be managed as normal properties\n        # Use Mobject().set(width=WIDTH)\n        # Use Mobject().set(height=HEIGHT)\n\n        vg.arrange(DOWN,aligned_edge=LEFT)\n\n        self.add(vg)", "source": "beethoven", "metadata": {"tutorial_file": "_04_properties_and_groups.py", "tutorial_number": 4, "scene_name": "VGroupMobjectsListComprehension", "scene_index": 3, "topic": "properties_and_groups"}}
{"description": "Basic Tex And Texts tutorial: simple tex and texts", "code": "from manim import *\n\nclass SimpleTexAndTexts(Scene):\n    def construct(self):\n        # Tex is a LaTeX plain text\n        tex = Tex(r\"This is \\LaTeX, with a formula: $x^2$\")\n        # MathTex is Tex but with $$ $$\n        math_tex = MathTex(r\"\\frac{\\rm d}{\\rm d\\it x}f = f'(x)\")\n        # Sometimes it will be better to use\n        # {n \\over d}\n        # instead\n        # \\frac{n}{d}\n\n        text = Text(\"Normal text with PC fonts\", font=\"Arial\")\n\n        Group(tex, math_tex, text).set(width=config.frame_width-1).arrange(DOWN)\n\n        self.add(tex, math_tex, text)\n        self.wait()", "source": "beethoven", "metadata": {"tutorial_file": "_05_basic_tex_and_texts.py", "tutorial_number": 5, "scene_name": "SimpleTexAndTexts", "scene_index": 0, "topic": "basic_tex_and_texts"}}
{"description": "Basic Tex And Texts tutorial: tex font template manual with write animations", "code": "from manim import *\n\nclass TexFontTemplateManual(Scene):\n    \"\"\"An example scene that uses a manually defined TexTemplate() object to create\n    LaTeX output in French Cursive font\"\"\"\n\n    def construct(self):\n        self.add(Tex(\"Tex Font Example\").to_edge(UL))\n        self.play(Write(FrenchCursive(\"$f: A \\\\longrightarrow B$\").shift(UP)))\n        self.play(Write(FrenchCursive(\"Behold! We can write math in French Cursive\")))\n        self.wait(1)\n        self.play(\n            Write(\n                Tex(\n                    \"See more font templates at \\\\\\\\ http://jf.burnol.free.fr/showcase.html\"\n                ).shift(2 * DOWN)\n            )\n        )\n        self.wait(2)", "source": "beethoven", "metadata": {"tutorial_file": "_05_basic_tex_and_texts.py", "tutorial_number": 5, "scene_name": "TexFontTemplateManual", "scene_index": 1, "topic": "basic_tex_and_texts"}}
{"description": "Basic Tex And Texts tutorial: music te x example with write animations", "code": "from manim import *\n\nclass MusicTeXExample(Scene):\n    def construct(self):\n        template = MusicTeX(r\"\"\"\n            \\parindent10mm\n            \\instrumentnumber{1}\n            \\setname1{Piano}\n            \\setstaffs1{2} \n            \\generalmeter{\\meterfrac44}\n            \\startextract \n            \\Notes\\ibu0f0\\qb0{cge}\\tbu0\\qb0g|\\hl j\\en\n            \\Notes\\ibu0f0\\qb0{cge}\\tbu0\\qb0g|\\ql l\\sk\\ql n\\en\n            \\bar\n            \\Notes\\ibu0f0\\qb0{dgf}|\\qlp i\\en\n            \\notes\\tbu0\\qb0g|\\ibbl1j3\\qb1j\\tbl1\\qb1k\\en\n            \\Notes\\ibu0f0\\qb0{cge}\\tbu0\\qb0g|\\hl j\\en\n            \\zendextract\n        \"\"\")\n        template.set(width=config[\"frame_width\"]-1)\n        self.play(\n            Write(template)\n        )\n        self.wait(2)", "source": "beethoven", "metadata": {"tutorial_file": "_05_basic_tex_and_texts.py", "tutorial_number": 5, "scene_name": "MusicTeXExample", "scene_index": 2, "topic": "basic_tex_and_texts"}}
{"description": "Basic Tex And Texts tutorial: tex and math text colors", "code": "from manim import *\n\nclass TexAndMathTextColors(Scene):\n    def construct(self):\n        # If the texts are simple, that is, \n        # without fractions, roots, subscripts and/or superscripts,\n        # it is possible to color the text as follows.\n        tex = Tex(\n            r\"This is \\LaTeX, with a formula: $x^2$\",\n            tex_to_color_map={\n                r\"\\LaTeX\": RED,\n                \"formula\": ORANGE,\n                \"$x^2$\": TEAL,\n            }\n        )\n        math_tex = MathTex(\n            r\"\\frac{\\rm d}{\\rm d\\it x}f = f'(x)\",\n            # You cannot use \"d\": RED, try it\n            tex_to_color_map={\n                \"f'(x)\": YELLOW,\n                # \"d\": RED,\n            }\n        )\n        text = Text(\n            \"Normal text with PC fonts\",\n            font=\"Arial\",\n            # These arguments can present problems in\n            # versions prior to 0.5.0, MarkupText class\n            # can be used instead of Text if text with\n            # alot of decorations is needed.\n            # Use Text for simple texts.\n            t2c={\n                \"Normal\": RED,\n            },\n            t2w={\n                \"text\": BOLD,\n            },\n            t2s={\n                \"fonts\": ITALIC\n            }\n        )\n\n        Group(tex, math_tex, text).set(width=config.frame_width-1).arrange(DOWN)\n\n        self.add(tex, math_tex, text)\n        self.wait()", "source": "beethoven", "metadata": {"tutorial_file": "_05_basic_tex_and_texts.py", "tutorial_number": 5, "scene_name": "TexAndMathTextColors", "scene_index": 3, "topic": "basic_tex_and_texts"}}
{"description": "Basic Tex And Texts tutorial: basic markup example", "code": "from manim import *\n\nclass BasicMarkupExample(Scene):\n    def construct(self):\n        text1 = MarkupText(\"<b>foo</b> <i>bar</i> <b><i>foobar</i></b>\")\n        text2 = MarkupText(\"<s>foo</s> <u>bar</u> <big>big</big> <small>small</small>\")\n        text3 = MarkupText(\"H<sub>2</sub>O and H<sub>3</sub>O<sup>+</sup>\")\n        text4 = MarkupText(\"type <tt>help</tt> for help\")\n        text5 = MarkupText(\n            '<span underline=\"double\">foo</span> <span underline=\"error\">bar</span>'\n        )\n        group = VGroup(text1, text2, text3, text4, text5).arrange(DOWN)\n        self.add(group)", "source": "beethoven", "metadata": {"tutorial_file": "_05_basic_tex_and_texts.py", "tutorial_number": 5, "scene_name": "BasicMarkupExample", "scene_index": 4, "topic": "basic_tex_and_texts"}}
{"description": "Basic Tex And Texts tutorial: color example", "code": "from manim import *\n\nclass ColorExample(Scene):\n    def construct(self):\n        text1 = MarkupText(\n            f'all in red <span fgcolor=\"{YELLOW}\">except this</span>', color=RED\n        )\n        text2 = MarkupText(\"nice gradient\", gradient=(BLUE, GREEN))\n        text3 = MarkupText(\n            'nice <gradient from=\"RED\" to=\"YELLOW\">intermediate</gradient> gradient',\n            gradient=(BLUE, GREEN),\n        )\n        text4 = MarkupText(\n            'fl ligature <gradient from=\"RED\" to=\"YELLOW\">causing trouble</gradient> here'\n        )\n        text4s = MarkupText(\n            'fl ligature <gradient from=\"RED\" to=\"YELLOW\" offset=\"1\">causing trouble</gradient> here'\n        )\n        text5 = MarkupText(\n            'fl ligature <gradient from=\"RED\" to=\"YELLOW\" offset=\"1\">defeated</gradient> with offset'\n        )\n        text6 = MarkupText(\n            'fl ligature <gradient from=\"RED\" to=\"YELLOW\" offset=\"1\">floating</gradient> inside'\n        )\n        text7 = MarkupText(\n            'fl ligature <gradient from=\"RED\" to=\"YELLOW\" offset=\"1,1\">floating</gradient> inside'\n        )\n        group = VGroup(text1, text2, text3, text4, text4s, text5, text6, text7).arrange(DOWN)\n        self.add(group)", "source": "beethoven", "metadata": {"tutorial_file": "_05_basic_tex_and_texts.py", "tutorial_number": 5, "scene_name": "ColorExample", "scene_index": 5, "topic": "basic_tex_and_texts"}}
{"description": "Basic Tex And Texts tutorial: underline example", "code": "from manim import *\n\nclass UnderlineExample(Scene):\n    def construct(self):\n        text1 = MarkupText(\n            '<span underline=\"double\" underline_color=\"green\">bla</span>'\n        )\n        text2 = MarkupText(\n            '<span underline=\"single\" underline_color=\"green\">xxx</span><gradient from=\"#ffff00\" to=\"RED\">aabb</gradient>y'\n        )\n        text3 = MarkupText(\n            '<span underline=\"single\" underline_color=\"green\">xxx</span><gradient from=\"#ffff00\" to=\"RED\" offset=\"-1\">aabb</gradient>y'\n        )\n        text4 = MarkupText(\n            '<span underline=\"double\" underline_color=\"green\">xxx</span><gradient from=\"#ffff00\" to=\"RED\">aabb</gradient>y'\n        )\n        text5 = MarkupText(\n            '<span underline=\"double\" underline_color=\"green\">xxx</span><gradient from=\"#ffff00\" to=\"RED\" offset=\"-2\">aabb</gradient>y'\n        )\n        group = VGroup(text1, text2, text3, text4, text5).arrange(DOWN)\n        self.add(group)", "source": "beethoven", "metadata": {"tutorial_file": "_05_basic_tex_and_texts.py", "tutorial_number": 5, "scene_name": "UnderlineExample", "scene_index": 6, "topic": "basic_tex_and_texts"}}
{"description": "Basic Tex And Texts tutorial: code from string with fade in, write animations", "code": "from manim import *\n\nclass CodeFromString(Scene):\n    def construct(self):\n        code = '''\n        from manim import Scene, Square\n\n        class FadeInSquare(Scene):\n            def construct(self):\n                s = Square()\n                self.play(FadeIn(s))\n                self.play(s.animate.scale(3))\n                self.wait()'''\n        rendered_code = Code(\n            code=code,\n            tab_width=4,\n            background=\"window\",\n            language=\"Python\",\n            font=\"Monospace\",\n            style=\"monokai\"\n        )\n        self.draw_code_all_lines_at_a_time(rendered_code)\n        self.wait()\n\n    def draw_code_all_lines_at_a_time(self, code, **kwargs):\n        self.play(LaggedStart(*[\n                Write(code[i])\n                for i in range(len(code))\n            ]),\n            **kwargs\n        )", "source": "beethoven", "metadata": {"tutorial_file": "_05_basic_tex_and_texts.py", "tutorial_number": 5, "scene_name": "CodeFromString", "scene_index": 7, "topic": "basic_tex_and_texts"}}
{"description": "Tex And Texts As Arrays tutorial: tex with single string array fail", "code": "from manim import *\nimport itertools as it\n\nclass TexWithSingleStringArrayFail(Scene):\n    def construct(self):\n        tex_string = \"Single string\"\n        math_text_string = \"x + y = 3\"\n\n        tex = Tex(tex_string)\n        math_text = MathTex(math_text_string)\n\n        logger.info(f\"len(tex_string): {len(tex_string)}\")\n        logger.info(f\"len(math_text_string): {len(math_text_string)}\")\n        print()\n        logger.info(f\"len(tex): {len(tex)}\")\n        logger.info(f\"len(math_text): {len(math_text)}\")\n\n        vg = VGroup(tex,math_text).scale(3).arrange(DOWN)\n\n        self.add(vg)\n        self.wait()", "source": "beethoven", "metadata": {"tutorial_file": "_06_tex_and_texts_as_arrays.py", "tutorial_number": 6, "scene_name": "TexWithSingleStringArrayFail", "scene_index": 0, "topic": "tex_and_texts_as_arrays"}}
{"description": "Tex And Texts As Arrays tutorial: tex with single string array", "code": "from manim import *\nimport itertools as it\n\nclass TexWithSingleStringArray(Scene):\n    def construct(self):\n        tex_string = \"Single string\"\n        math_text_string = \"x + y = 3\"\n\n        tex = Tex(tex_string)[0] # <- Add [0]\n        math_text = MathTex(math_text_string)[0] # <- Add [0]\n\n        logger.info(f\"len(tex_string): {len(tex_string)}\")\n        logger.info(f\"len(math_text_string): {len(math_text_string)}\")\n        print()\n        logger.info(f\"len(tex): {len(tex)}\")\n        logger.info(f\"len(math_text): {len(math_text)}\")\n\n        vg = VGroup(tex,math_text).scale(3).arrange(DOWN)\n\n        self.add(vg)\n        self.wait()", "source": "beethoven", "metadata": {"tutorial_file": "_06_tex_and_texts_as_arrays.py", "tutorial_number": 6, "scene_name": "TexWithSingleStringArray", "scene_index": 1, "topic": "tex_and_texts_as_arrays"}}
{"description": "Tex And Texts As Arrays tutorial: show indexes of tex", "code": "from manim import *\nimport itertools as it\n\nclass ShowIndexesOfTex(Scene):\n    def construct(self):\n        tex_string = \"Single string\"\n        math_text_string = \"x + y = 3\"\n\n        tex = Tex(tex_string) # <- Add [0]\n        math_text = MathTex(math_text_string) # <- Add [0]\n\n        vg = VGroup(tex,math_text).scale(3).arrange(DOWN,buff=1)\n\n        n1 = get_tex_indexes(tex[0])\n        n2 = get_tex_indexes(math_text[0])\n\n        tex[0][3].set_color(ORANGE)\n        math_text[0][4].set_color(ORANGE)\n\n        self.add(vg,n1,n2)\n        self.wait()", "source": "beethoven", "metadata": {"tutorial_file": "_06_tex_and_texts_as_arrays.py", "tutorial_number": 6, "scene_name": "ShowIndexesOfTex", "scene_index": 2, "topic": "tex_and_texts_as_arrays"}}
{"description": "Tex And Texts As Arrays tutorial: multiple tex string", "code": "from manim import *\nimport itertools as it\n\nclass MultipleTexString(Scene):\n    def construct(self):\n        tex_string = [\"Multiple \",\"tex \",\"string\"]\n        math_text_string = [\"x+\",\"y\",\"=\",\"3\"]\n\n        tex = Tex(*tex_string) # <- Add [0]\n        math_text = MathTex(*math_text_string) # <- Add [0]\n\n        vg = VGroup(tex,math_text).scale(3).arrange(DOWN,buff=1)\n\n        n1 = get_tex_indexes(tex)\n        n2 = get_tex_indexes(math_text)\n\n        f = lambda mob,tex: mob.next_to(tex,UP,buff=0)\n        n_1_1 = get_tex_indexes(tex[0],funcs=[f])\n        n_1_2 = get_tex_indexes(tex[1],funcs=[f])\n        n_1_3 = get_tex_indexes(tex[2],funcs=[f])\n\n        tex[0][2].set_color(TEAL)\n        tex[1][1].set_color(ORANGE)\n        tex[2][3].set_color(PINK)\n\n        math_text[0].set_color(PURPLE)\n\n        self.add(vg,n1,n2,n_1_1,n_1_2,n_1_3)\n        self.wait()", "source": "beethoven", "metadata": {"tutorial_file": "_06_tex_and_texts_as_arrays.py", "tutorial_number": 6, "scene_name": "MultipleTexString", "scene_index": 3, "topic": "tex_and_texts_as_arrays"}}
